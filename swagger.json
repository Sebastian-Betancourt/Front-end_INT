{
  "openapi": "3.0.1",
  "info": {
    "title": "API General",
    "version": "1.0.0",
    "description": "Swagger general que integra las APIs de Clientes, Empleados, Equipos, Inicio de Sesión, Órdenes de Reparación, Pagos y Usuarios."
  },
  "servers": [
    {
      "url": "http://localhost"
    }
  ],
  "paths": {
    "/api/cliente/todos": {
      "get": {
        "summary": "Obtener todos los clientes",
        "description": "Retorna una lista de todos los clientes ordenados por nombre.",
        "responses": {
          "200": {
            "description": "Lista de clientes obtenida correctamente.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cliente"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/cliente/cedula/{cardIdentifi}": {
      "get": {
        "summary": "Obtener cliente por cédula",
        "description": "Retorna la información de un cliente según su número de cédula.",
        "parameters": [
          {
            "name": "cardIdentifi",
            "in": "path",
            "required": true,
            "description": "Número de cédula del cliente",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cliente encontrado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cliente"
                }
              }
            }
          },
          "404": {
            "description": "Cliente no encontrado."
          }
        }
      }
    },
    "/api/cliente/{id}": {
      "get": {
        "summary": "Obtener cliente por ID",
        "description": "Retorna la información de un cliente según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del cliente",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cliente encontrado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cliente"
                }
              }
            }
          },
          "404": {
            "description": "Cliente no encontrado."
          }
        }
      }
    },
    "/api/cliente/crear": {
      "post": {
        "summary": "Crear un cliente",
        "description": "Crea un nuevo cliente. Retorna error si el nombre está vacío o si ya existe la cédula.",
        "requestBody": {
          "description": "Objeto de cliente a crear",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClienteInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cliente creado exitosamente."
          },
          "400": {
            "description": "Error en la creación del cliente. Nombre vacío o cédula duplicada."
          }
        }
      }
    },
    "/api/cliente/actualizar/{id}": {
      "put": {
        "summary": "Actualizar cliente por ID",
        "description": "Actualiza los datos de un cliente existente según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del cliente a actualizar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Objeto con los nuevos datos del cliente",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClienteInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registro actualizado correctamente."
          },
          "404": {
            "description": "Cliente no encontrado."
          }
        }
      }
    },
    "/api/cliente/eliminar/id/{id}": {
      "delete": {
        "summary": "Eliminar cliente por ID",
        "description": "Elimina un cliente de la base de datos según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del cliente a eliminar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registro eliminado correctamente."
          },
          "400": {
            "description": "Error al eliminar el registro."
          }
        }
      }
    },
    "/api/cliente/eliminar/cedula/{cardIdentifi}": {
      "delete": {
        "summary": "Eliminar cliente por cédula",
        "description": "Elimina un cliente usando su número de cédula.",
        "parameters": [
          {
            "name": "cardIdentifi",
            "in": "path",
            "required": true,
            "description": "Número de cédula del cliente a eliminar",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registro eliminado correctamente."
          },
          "404": {
            "description": "Cliente no encontrado."
          }
        }
      }
    },
    "/api/cliente/actualizar/cedula/{cardIdentifi}": {
      "put": {
        "summary": "Actualizar cliente por cédula",
        "description": "Actualiza los datos de un cliente según su número de cédula.",
        "parameters": [
          {
            "name": "cardIdentifi",
            "in": "path",
            "required": true,
            "description": "Número de cédula del cliente a actualizar",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Objeto con los nuevos datos del cliente",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClienteInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registro actualizado correctamente."
          },
          "404": {
            "description": "Cliente no encontrado."
          }
        }
      }
    },
    "/api/empleado/{id}": {
      "get": {
        "summary": "Obtener empleado por ID",
        "description": "Retorna la información de un empleado según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del empleado",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empleado encontrado."
          },
          "404": {
            "description": "Empleado no encontrado."
          }
        }
      }
    },
    "/api/empleado/todos": {
      "get": {
        "summary": "Obtener todos los empleados",
        "description": "Retorna la lista de todos los empleados.",
        "responses": {
          "200": {
            "description": "Lista de empleados obtenida correctamente."
          }
        }
      }
    },
    "/api/empleado/crear": {
      "post": {
        "summary": "Crear un empleado",
        "description": "Guarda un nuevo empleado.",
        "requestBody": {
          "description": "Objeto de empleado a crear",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmpleadoDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Empleado creado."
          },
          "400": {
            "description": "Solicitud incorrecta."
          }
        }
      }
    },
    "/api/empleado/actualizar/{id}": {
      "put": {
        "summary": "Actualizar empleado por ID",
        "description": "Actualiza los datos de un empleado existente según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del empleado a actualizar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Objeto con los nuevos datos del empleado",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmpleadoDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Empleado actualizado correctamente."
          },
          "404": {
            "description": "Empleado no encontrado."
          }
        }
      }
    },
    "/api/empleado/eliminar/id/{id}": {
      "delete": {
        "summary": "Eliminar empleado por ID",
        "description": "Elimina un empleado de la base de datos según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del empleado a eliminar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empleado eliminado correctamente."
          },
          "400": {
            "description": "Solicitud incorrecta."
          }
        }
      }
    },
    "/api/empleado/eliminar/cedula/{cedEmployee}": {
      "delete": {
        "summary": "Eliminar empleado por cédula",
        "description": "Elimina un empleado usando su número de cédula.",
        "parameters": [
          {
            "name": "cedEmployee",
            "in": "path",
            "required": true,
            "description": "Número de cédula del empleado a eliminar",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empleado eliminado correctamente."
          },
          "404": {
            "description": "Empleado no encontrado."
          }
        }
      }
    },
    "/api/empleado/actualizar/cedula/{cedEmployee}": {
      "put": {
        "summary": "Actualizar empleado por cédula",
        "description": "Actualiza los datos de un empleado según su número de cédula.",
        "parameters": [
          {
            "name": "cedEmployee",
            "in": "path",
            "required": true,
            "description": "Número de cédula del empleado a actualizar",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Objeto con los nuevos datos del empleado",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmpleadoDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Empleado actualizado correctamente."
          },
          "404": {
            "description": "Empleado no encontrado."
          }
        }
      }
    },
    "/api/equipo/{id}": {
      "get": {
        "summary": "Obtener equipo por ID",
        "description": "Retorna la información de un equipo según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del equipo",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Equipo encontrado."
          },
          "404": {
            "description": "Equipo no encontrado."
          }
        }
      }
    },
    "/api/equipo/todos": {
      "get": {
        "summary": "Obtener todos los equipos",
        "description": "Retorna la lista de todos los equipos.",
        "responses": {
          "200": {
            "description": "Lista de equipos obtenida correctamente."
          }
        }
      }
    },
    "/api/equipo/crear": {
      "post": {
        "summary": "Crear un equipo",
        "description": "Guarda un nuevo equipo.",
        "requestBody": {
          "description": "Objeto de equipo a crear",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EquipoDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Equipo creado correctamente."
          },
          "400": {
            "description": "Datos inválidos."
          }
        }
      }
    },
    "/api/equipo/actualizar/{id}": {
      "put": {
        "summary": "Actualizar un equipo",
        "description": "Actualiza los datos de un equipo existente según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del equipo a actualizar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Objeto con los nuevos datos del equipo",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EquipoDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Equipo actualizado correctamente."
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Equipo no encontrado."
          }
        }
      }
    },
    "/api/equipo/eliminar/{id}": {
      "delete": {
        "summary": "Eliminar un equipo",
        "description": "Elimina un equipo de la base de datos según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del equipo a eliminar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Equipo eliminado correctamente."
          },
          "400": {
            "description": "ID inválido."
          }
        }
      }
    },
    "/api/equipo/enum/condicion": {
      "get": {
        "summary": "Obtener valores del enum de condición de equipo",
        "description": "Retorna la lista de valores del enum para la condición de un equipo.",
        "responses": {
          "200": {
            "description": "Lista de valores del enum obtenida correctamente."
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "summary": "Autenticar usuario",
        "description": "Autentica un usuario y devuelve un token JWT si las credenciales son correctas.",
        "requestBody": {
          "description": "Credenciales del usuario",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutenticacionUsuario"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Autenticación exitosa.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtToken"
                }
              }
            }
          },
          "401": {
            "description": "Credenciales inválidas."
          }
        }
      }
    },
    "/api/login/registro": {
      "post": {
        "summary": "Registrar un nuevo usuario",
        "description": "Registra un nuevo usuario en el sistema.",
        "requestBody": {
          "description": "Datos del usuario a registrar",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistroUsuario"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Usuario registrado exitosamente."
          }
        }
      }
    },
    "/api/login/usuarios": {
      "get": {
        "summary": "Obtener todos los usuarios",
        "description": "Retorna una lista de todos los usuarios registrados.",
        "responses": {
          "200": {
            "description": "Lista de usuarios obtenida correctamente.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsuarioRespuesta"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/login/usuario/{id}": {
      "get": {
        "summary": "Buscar usuario por ID",
        "description": "Retorna la información de un usuario según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del usuario",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usuario encontrado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsuarioRespuesta"
                }
              }
            }
          },
          "404": {
            "description": "Usuario no encontrado."
          }
        }
      }
    },
    "/api/login/usuario/eliminar/{id}": {
      "delete": {
        "summary": "Eliminar usuario por ID",
        "description": "Elimina un usuario del sistema según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del usuario a eliminar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usuario eliminado exitosamente."
          },
          "404": {
            "description": "Usuario no encontrado."
          }
        }
      }
    },
    "/api/orden/{id}": {
      "get": {
        "summary": "Buscar orden por ID",
        "description": "Retorna la información de una orden de reparación según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID de la orden",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orden encontrada."
          },
          "404": {
            "description": "Orden no encontrada."
          }
        }
      }
    },
    "/api/orden/todos": {
      "get": {
        "summary": "Obtener todas las órdenes",
        "description": "Retorna la lista de todas las órdenes de reparación.",
        "responses": {
          "200": {
            "description": "Lista de órdenes obtenida correctamente."
          }
        }
      }
    },
    "/api/orden/ultima": {
      "get": {
        "summary": "Obtener la última orden",
        "description": "Retorna la última orden registrada.",
        "responses": {
          "200": {
            "description": "Última orden encontrada."
          },
          "404": {
            "description": "No se encontró ninguna orden."
          }
        }
      }
    },
    "/api/orden/crear": {
      "post": {
        "summary": "Crear una orden",
        "description": "Guarda una nueva orden de reparación.",
        "requestBody": {
          "description": "Objeto de orden a crear",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdenReparacionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Orden creada exitosamente."
          },
          "400": {
            "description": "Datos incorrectos o faltantes."
          }
        }
      }
    },
    "/api/orden/actualizar/{id}": {
      "put": {
        "summary": "Actualizar una orden",
        "description": "Actualiza los datos de una orden existente según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID de la orden a actualizar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Objeto con los nuevos datos de la orden",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdenReparacionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Orden actualizada exitosamente."
          },
          "400": {
            "description": "Datos incorrectos."
          },
          "404": {
            "description": "Orden no encontrada."
          }
        }
      }
    },
    "/api/orden/eliminar/{id}": {
      "delete": {
        "summary": "Eliminar una orden",
        "description": "Elimina una orden de reparación según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID de la orden a eliminar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orden eliminada exitosamente."
          },
          "400": {
            "description": "ID no válido."
          }
        }
      }
    },
    "/api/pago": {
      "get": {
        "summary": "Obtener todos los pagos",
        "description": "Retorna la lista de todos los pagos realizados.",
        "responses": {
          "200": {
            "description": "Lista de pagos obtenida correctamente.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PagoDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/pago/{id}": {
      "get": {
        "summary": "Buscar pago por ID",
        "description": "Retorna la información de un pago según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del pago",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pago encontrado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagoDTO"
                }
              }
            }
          },
          "404": {
            "description": "Pago no encontrado."
          }
        }
      }
    },
    "/api/pago/crear": {
      "post": {
        "summary": "Crear un pago",
        "description": "Guarda un nuevo pago.",
        "requestBody": {
          "description": "Objeto de pago a crear",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PagoDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pago guardado exitosamente.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagoDTO"
                }
              }
            }
          },
          "400": {
            "description": "Datos inválidos."
          }
        }
      }
    },
    "/api/pago/actualizar/{id}": {
      "put": {
        "summary": "Actualizar un pago",
        "description": "Actualiza los datos de un pago existente según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del pago a actualizar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Objeto con los nuevos datos del pago",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PagoDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pago actualizado exitosamente."
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Pago no encontrado."
          }
        }
      }
    },
    "/api/pago/eliminar/{id}": {
      "delete": {
        "summary": "Eliminar un pago",
        "description": "Elimina un pago según su ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID del pago a eliminar",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pago eliminado exitosamente."
          },
          "400": {
            "description": "ID inválido."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Cliente": {
        "type": "object",
        "properties": {
          "id_customer": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Juan Pérez"
          },
          "cardIdentifi": {
            "type": "string",
            "example": "1234567890"
          },
          "phone": {
            "type": "string",
            "example": "555-1234"
          },
          "mail": {
            "type": "string",
            "example": "juan@example.com"
          }
        }
      },
      "ClienteInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Juan Pérez"
          },
          "cardIdentifi": {
            "type": "string",
            "example": "1234567890"
          },
          "phone": {
            "type": "string",
            "example": "555-1234"
          },
          "mail": {
            "type": "string",
            "example": "juan@example.com"
          }
        },
        "required": [
          "name",
          "cardIdentifi",
          "phone",
          "mail"
        ]
      },
      "EmpleadoDTO": {
        "type": "object",
        "properties": {
          "idEmployee": {
            "type": "integer",
            "example": 1
          },
          "nameEmployee": {
            "type": "string",
            "example": "María López"
          },
          "positionEmployee": {
            "type": "string",
            "example": "Técnico"
          },
          "cedEmployee": {
            "type": "string",
            "example": "9876543210"
          },
          "dirEmployee": {
            "type": "string",
            "example": "Calle Falsa 123"
          },
          "telEmpployee": {
            "type": "string",
            "example": "555-6789"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrdenReparacionDTO"
            }
          }
        }
      },
      "EquipoDTO": {
        "type": "object",
        "properties": {
          "id_equip": {
            "type": "integer",
            "example": 1
          },
          "model_equip": {
            "type": "string",
            "example": "Modelo X"
          },
          "brand_equip": {
            "type": "string",
            "example": "Marca Y"
          },
          "color_equip": {
            "type": "string",
            "example": "Negro"
          },
          "state_equip": {
            "type": "string",
            "example": "Activo"
          },
          "pass_equip": {
            "type": "string"
          },
          "anti_equip": {
            "type": "string"
          },
          "accessor_equip": {
            "type": "string"
          },
          "reported_equip": {
            "type": "boolean",
            "example": false
          },
          "detail_phy_equip": {
            "type": "string"
          },
          "temp_equip": {
            "type": "string"
          },
          "on_off_equip": {
            "type": "boolean",
            "example": true
          },
          "cau_dam_equip": {
            "type": "string"
          },
          "condEquip": {
            "type": "string",
            "example": "Nuevo"
          },
          "id_customer": {
            "type": "integer",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Juan Pérez"
          }
        }
      },
      "AutenticacionUsuario": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "usuario@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "contraseña123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "JwtToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR..."
          },
          "userId": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "OrdenReparacionDTO": {
        "type": "object",
        "properties": {
          "id_order": {
            "type": "integer",
            "example": 1
          },
          "create_date": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-01T10:00:00Z"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-05T18:00:00Z"
          },
          "tot_pay": {
            "type": "number",
            "example": 150.5
          },
          "addit_details": {
            "type": "string",
            "example": "Reparación de pantalla"
          },
          "customer": {
            "$ref": "#/components/schemas/Cliente"
          },
          "equipment": {
            "$ref": "#/components/schemas/EquipoDTO"
          },
          "employee": {
            "$ref": "#/components/schemas/EmpleadoDTO"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PagoDTO"
            }
          }
        }
      },
      "PagoDTO": {
        "type": "object",
        "properties": {
          "id_pay": {
            "type": "integer",
            "example": 1
          },
          "date_pay": {
            "type": "string",
            "format": "date",
            "example": "2025-04-01"
          },
          "money_pay": {
            "type": "number",
            "example": 100.0
          },
          "money_b_pay": {
            "type": "number",
            "example": 50.0
          },
          "order_id": {
            "type": "integer",
            "example": 1
          },
          "order_tot_pay": {
            "type": "number",
            "example": 150.5
          }
        }
      },
      "RegistroUsuario": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "usuario123"
          },
          "password": {
            "type": "string",
            "example": "contraseña123"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "UsuarioRespuesta": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "usuario123"
          }
        }
      }
    }
  }
}
